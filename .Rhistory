die_expect(die_fair)
sum(1:6)/6
print(g2)
head(sh)
nrow(nh)
nh
median(resampledMedians)
median(sh)
sample(fh, nh*B, replace = TRUE)
sam <- sample(fh, nh*B, replace = TRUE)
resam <- matrix(sam, B, nh)
meds <- apply(resam, 1, medain)
meds <- apply(resam, 1, median)
median(fh) - median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians, c(.025, .975))
quantile(meds, c(.025, .975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata)
range(Cdata$count)
BCcounts
spray
group
testStat
obs <- testSstat(BCcounts, group)
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count) - mean(Cdata$count)
sample
sample(group)
perms <- sapply(1:10000, function(i) testStat(BCcounts, sample(groupg)))
perms <- sapply(1:10000, function(i) testStat(BCcounts, sample(group)))
perms > obs
mean(perms>obs)
testStat(DEcounts, group)
perms <- sapply(1:10000, funtion(i) testStat(DEcounts, sample(group)))
perms <- sapply(1:10000, function(i) testStat(DEcounts, sample(group)))
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv(path2csv, stringAsFactors = FALSE)
?read.csv
read.csv(path2csv)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
libraby(dplyr)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- arrange(select(cran, ip_id))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutat(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb /2^10)
mutate(cran3, correct_size = size +1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
print(cran)
cran
?group_by()
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
summarize(apply(by_package, mean(size)))
summarize(by_package, mean(size))
summarize()
submit()
# 3. Check your spelling!
# 4. Store the result in pack_sum (for 'package summary')
#
# You should also take a look at ?n and ?n_distinct, so
# that you really understand what is going on.
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(country),
countries = n_distinct(country),
avg_bytes = mean(size))
reset()
?n
source('C:/Users/lisar/AppData/Local/Temp/RtmpM5u93n/summarize1.R')
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
?arrange
arrange(top_count, desc(count))
arrange(top_count, count, desc)
arrange(count, desc)
?arrange
?desc
arrange(top_count, count)
arrange(top_counts, count)
arrange(top_counts, desc(count)
)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(packsum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
submit()
?mutate
submit()
submit()
submit()
submit
submit()
submit()
submit()
submit()
reset()
submit()
submit()
submit()
submit
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
skip()
submit()
submit()
skip()
submit()
submit()
skip()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_calse, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into = c("sex", "class"))
submit()
student3
students3
submit()
submit()
?spread
submit()
?spread
skip()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?rbind_list
rbind_list(passed, failed)
sat
?separate
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
now(this_moment)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1/2/2012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hhmmss("03:22:14")
skip()
dt2
hms(dt2)
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, now()
)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 166, seconds = 0)
this_moment
now("America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc +days(2)
depart
depart <- update(depart, hour = 17, minute =34)
depart <- update(depart, hours = 17, minutes =34)
depart
arrive <- depart +hours(15) +minutes(50)
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
mini
library(dplyr)
mydf
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
?arrange
arrange(top_counts, desc(counts))
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("caret")
library(caret)
library(rpart)
install.packages(rattle)
set.seed(125)
inTrain <- createDataPartition(y = segmentationOrigianl$Case, list = FALSE)
inTrain <- createDataPartition(y = segmentationOriginal$Case, list = FALSE)
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
modFit <- train(Class ~ ., data = train, method = "rpart")
modFit <- train(Class ~ ., data = train, method = "rpart")
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train <- sample(1:dim(SAheart)[1], size = dim(SAheart)[1]/2, replace = F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values, prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(trainSA$chd, predict(model, newdata = trainSA))
lilbrary(ElemStatLearn)
ibrary(ElemStatLearn)
library(ElemSttatLearn)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
a <- radomForest(y ~., data = vowel.train, importance = FALSE)
a <- randomForest(y ~., data = vowel.train, importance = FALSE)
a <- randomForest(y ~ ., data = vowel.train, importance = FLASE)
?randomForest
install.packages("randomForest")
library(randomForest)
a <- randomForest(y ~ ., data = vowel.train, importance = FLASE)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FLASE)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
M <- train(y ~ ., data = vowel.train, method = "rf")
M <- train(y ~ ., data = vowel.train, method = "rf")
?train
M <- train(y ~ ., data = vowel.train)
?e1071
install.packages("e1071")
library(e1071)
M <- train(y ~ ., data = vowel.train, method = "rf")
varImp(M)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
b
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
M <- train(y ~ ., data = vowel.train, method = "rf")
varImp(M)
order(varImp(M))
install.packages("shiny")
library(shiny)
library(shiny)
install.packages("shiny")
library(shiny)
today()
?today
?date
date()
date()-1/1/2015
install.packages("shiny")
install.packages("shiny")
library(shiny)
runExample("01_hello")
getwd()
setwd("~/R/DevelopingDataProducts")
library(shiny)
runApp()
runApp()
runApp()
runApp()
date()
runApp()
runApp()
setwd("~/R/DevelopingDataProducts/David")
getwd()
runApp()
runApp()
install.packages("shiny")
runApp()
library(shiny)
runApp()
install.packages("shiny")
library(shiny)
runApp()
runApp()
runApp()
setwd("~/R/DevelopingDataProducts")
runApp()
?as.date
date <- as.Date('1/1/2015')
date
date <- as.Date('2015/1/1')
date
date()
date() - date
as.numeric(date())
difftime(strptime(date(), format = "%d.%m.%y"), strptime(date, format = "%d.%m.%y"))
difftime(strptime(date(), format = "%d.%m.%y"), strptime(date, format = "%d.%m.%y"), units = "days")
date1 <- as.Date("1/1/2015")
date1
difftime(strptime("1.1.2015", format = "%d.%m.%y"), strptime("21.2.2015", format = "%d.%m.%y"), units = "days")
as.Date(date())
date()
today()
format(date())
Sys.Date()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/R/DevelopingDataProducts/David")
runApp()
install.packages("gdebi")
$ sudo apt-get install gdebi-core
sudo apt-get install gdebi-core
install.packages("gdebi-core")
$ sudo apt-get install gdebi-core
$ wget http://download3.rstudio.org/ubuntu-12.04/x86_64/shiny-server-1.3.0.403-amd64.deb
$ sudo gdebi shiny-server-1.3.0.403-amd64.deb
runApp()
# Clone the repository from GitHub
git clone https://github.com/rstudio/shiny-server.git
# Get into a temporary directory in which we'll build the project
cd shiny-server
mkdir tmp
cd tmp
# Add the bin directory to the path so we can reference node
DIR=`pwd`
PATH=$PATH:$DIR/../bin/
# See the "Python" section below if your default python version is not 2.6 or 2.7.
PYTHON=`which python`
# Check the version of Python. If it's not 2.6.x or 2.7.x, see the Python section below.
$PYTHON --version
# Use cmake to prepare the make step. Modify the "--DCMAKE_INSTALL_PREFIX"
# if you wish the install the software at a different location.
cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DPYTHON="$PYTHON" ../
# Get an error here? Check the "How do I set the cmake Python version?" question below
# Recompile the npm modules included in the project
make
mkdir ../build
(cd .. && bin/npm --python="$PYTHON" rebuild)
# Need to rebuild our gyp bindings since 'npm rebuild' won't run gyp for us.
(cd .. && ext/node/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js --python="$PYTHON" rebuild)
# Install the software at the predefined location
sudo make install
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='drandazzo9', token='A404E1ED67A5DE1AC270CAE9CF5CA06B', secret='Cqm95l2pYyRuS9Nrcra87+4OA2obieFRUGikw3s1')
library(shinyapps)
shinyapps::deployApp('http://127.0.0.1:7343/')
shiny::runApp()
shinyapps::deployApp('http://127.0.0.1:7343/')
shinyapps::deployApp('C:\\Users\\lisar\\Documents\\R\\DevelopingDataProducts\\David')
shinyapps::setAccountInfo(name='lhr2', token='523FD2C5C137DAA2BDD7F4DADFF0A6DA', secret='fJR6DtfMNB2xd39VoTbhRHa3YIofWLuAQLsvvMTv')
shinyapps::deployApp('C:\\Users\\lisar\\Documents\\R\\DevelopingDataProducts')
